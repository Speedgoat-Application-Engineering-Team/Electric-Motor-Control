function [Optimized_DesignVars, Info] = responseOptimization_FieldOrientedController_MIL(DesignVars)
%RESPONSEOPTIMIZATION_FIELDORIENTEDCONTROLLER_MIL
%
% Solve a design optimization problem for the FieldOrientedController_MIL model.
%
% The function returns optimized parameter values, Optimized_DesignVars,
% and optimization termination information, Info.
%
% The input argument, DesignVars, defines the model parameters to optimize,
% if omitted the parameters specified in the function body are optimized.
%
% Modify the function to include or exclude new design requirements, or
% to change the optimization options.
%
% Auto-generated by SDOTOOL on 08-Apr-2020 17:43:14.
%

%% Open the model.
open_system('FieldOrientedController_MIL')

%% Specify Design Variables
%
% Specify model parameters as design variables to optimize.
if nargin < 1 || isempty(DesignVars)
    DesignVars = sdo.getParameterFromModel('FieldOrientedController_MIL',{'paramVelocityControlI','paramVelocityControlP','paramCurrentControlI','paramCurrentControlP'});
    DesignVars(1).Minimum = 0.01;
    DesignVars(1).Maximum = 1;
    DesignVars(1).Scale = 0.0078125;
    DesignVars(2).Minimum = 0.01;
    DesignVars(2).Maximum = 0.3;
    DesignVars(2).Scale = 0.015625;
    DesignVars(3).Minimum = 10;
    DesignVars(3).Maximum = 1000;
    DesignVars(4).Minimum = 0.1;
    DesignVars(4).Maximum = 5;
end

%% Specify Design Requirements
%
% Specify design requirements to satisfy during optimization.
Requirements = struct;
Requirements.rotorVelocity_UpperLimit = sdo.requirements.SignalBound(...
    'BoundMagnitudes', [1 1;102 102;102 102;102 102], ...
    'BoundTimes', [0 0.5;0.5 1;1 3;3 5]);
Requirements.rotorVelocity_LowerLimit = sdo.requirements.SignalBound(...
    'BoundMagnitudes', [-1 -1;98 98;90 90;97 98], ...
    'BoundTimes', [0 0.65;0.65 2.5;2.5 3;3 5], ...
    'Type', '>=');
Requirements.Current_UpperLimit = sdo.requirements.SignalBound(...
    'BoundMagnitudes', [20 20], ...
    'BoundTimes', [0 5]);
Requirements.Current_LowerLimit = sdo.requirements.SignalBound(...
    'BoundMagnitudes', [-20 -20], ...
    'BoundTimes', [0 5], ...
    'Type', '>=');

%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('FieldOrientedController_MIL');

phaseCurrent_Info = Simulink.SimulationData.SignalLoggingInfo;
phaseCurrent_Info.BlockPath = 'PMSM_Simscape_Model/Current_Transducer/Current';
phaseCurrent_Info.LoggingInfo.LoggingName = 'phaseCurrent';
phaseCurrent_Info.LoggingInfo.NameMode = 1;

rotorVelocity_Info = Simulink.SimulationData.SignalLoggingInfo;
rotorVelocity_Info.BlockPath = 'FieldOrientedController_MIL/InputBus/Signal Copy';
rotorVelocity_Info.LoggingInfo.LoggingName = 'rotorVelocity';
rotorVelocity_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = [...
    phaseCurrent_Info; ...
    rotorVelocity_Info];

%% Create Optimization Objective Function
%
% Create a function that is called at each optimization iteration
% to evaluate the design requirements.
%
% Use an anonymous function with one argument that calls FieldOrientedController_MIL_optFcn.
optimfcn = @(P) FieldOrientedController_MIL_optFcn(P,Simulator,Requirements);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.MethodOptions.ConstraintTolerance = 0.0001;
Options.MethodOptions.FunctionTolerance = 0.0001;
Options.MethodOptions.OptimalityTolerance = 0.0001;
Options.OptimizedModel = Simulator;

%% Optimize the Design
%
% Call sdo.optimize with the objective function handle, parameters to
% optimize, and options.
[Optimized_DesignVars,Info] = sdo.optimize(optimfcn,DesignVars,Options);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('FieldOrientedController_MIL',Optimized_DesignVars);
end

function Vals = FieldOrientedController_MIL_optFcn(P,Simulator,Requirements)
%FIELDORIENTEDCONTROLLER_MIL_OPTFCN
%
% Function called at each iteration of the optimization problem.
%
% The function is called with a set of parameter values, P, and returns
% the objective value and constraint violations, Vals, to the optimization
% solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%% Model Evaluation

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('FieldOrientedController_MIL','SignalLoggingName'));
phaseCurrent_Log = find(SimLog,'phaseCurrent');
rotorVelocity_Log = find(SimLog,'rotorVelocity');

% Evaluate the design requirements.
Cleq_rotorVelocity_UpperLimit = evalRequirement(Requirements.rotorVelocity_UpperLimit,rotorVelocity_Log.Values);
Cleq_rotorVelocity_LowerLimit = evalRequirement(Requirements.rotorVelocity_LowerLimit,rotorVelocity_Log.Values);
Cleq_Current_UpperLimit = evalRequirement(Requirements.Current_UpperLimit,phaseCurrent_Log.Values);
Cleq_Current_LowerLimit = evalRequirement(Requirements.Current_LowerLimit,phaseCurrent_Log.Values);

%% Return Values.
%
% Collect the evaluated design requirement values in a structure to
% return to the optimization solver.
Vals.Cleq = [...
    Cleq_rotorVelocity_UpperLimit(:); ...
    Cleq_rotorVelocity_LowerLimit(:); ...
    Cleq_Current_UpperLimit(:); ...
    Cleq_Current_LowerLimit(:)];
end
